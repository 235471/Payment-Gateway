networks:
  payment-network:
    driver: bridge

services:
  # --- Databases ---
  db-go:
    image: bitnami/postgresql:latest
    container_name: payment_gateway_db
    environment:
      POSTGRES_USER: pgsql
      POSTGRES_PASSWORD: pgsql
      POSTGRES_DB: gateway
    ports:
      - "5434:5432"
    volumes:
      - postgres_go_data:/bitnami/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "pgsql", "-d", "gateway"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - payment-network

  db-nestjs:
    image: bitnami/postgresql:latest
    container_name: anti_fraud_db
    environment:
      POSTGRESQL_USERNAME: pgsql
      POSTGRESQL_PASSWORD: pgsql
      POSTGRESQL_DATABASE: anti-fraud
    ports:
      - "5433:5432"
    volumes:
      - postgres_nestjs_data:/bitnami/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "pgsql", "-d", "anti-fraud"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - payment-network

  # --- Kafka ---
  kafka:
    image: confluentinc/cp-server:7.9.0
    container_name: kafka_broker
    ports:
      - "9093:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - payment-network

  kafka-init:
    image: confluentinc/cp-server:7.9.0
    container_name: kafka_init
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...' && \
        cub kafka-ready -b kafka:29092 1 60 && \
        echo 'Kafka ready! Creating topics...' && \
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic pending_transactions --partitions 1 --replication-factor 1 && \
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic transactions_result --partitions 1 --replication-factor 1 && \
        echo 'Topics created. Verifying...' && \
        # Add verification loop - wait until both topics appear in the list
        until kafka-topics --bootstrap-server kafka:29092 --list | grep -q 'pending_transactions' && kafka-topics --bootstrap-server kafka:29092 --list | grep -q 'transactions_result'; do \
          echo 'Waiting for topics to be fully available...' && sleep 2; \
        done && \
        echo 'Topics verified successfully!'"
    networks:
      - payment-network

  # --- Application Services ---
  go-backend:
    build:
      context: ./backend-go-api
      dockerfile: Dockerfile
    container_name: go_backend_service
    ports:
      - "8080:8080"
    environment:
      DB_HOST: db-go
      DB_PORT: 5432
      DB_USER: pgsql
      DB_PASSWORD: pgsql
      DB_NAME: gateway
      DB_SSLMODE: disable
      KAFKA_BROKERS: kafka:29092
      KAFKA_PENDING_TRANSACTIONS_TOPIC: pending_transactions
      KAFKA_TRANSACTIONS_RESULT_TOPIC: transactions_result
      KAFKA_CONSUMER_GROUP_ID: gateway-group
      HTTP_PORT: 8080
    depends_on:
      db-go:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - payment-network
    restart: unless-stopped

  anti-fraud:
    build:
      context: ./anti-fraud-micro-service
      dockerfile: Dockerfile
    container_name: anti_fraud_service
    ports:
      - "3333:3000"
    environment:
      DATABASE_URL: postgresql://pgsql:pgsql@db-nestjs:5432/anti-fraud?schema=public
      KAFKA_BROKERS: kafka:29092
      KAFKA_PENDING_TRANSACTIONS_TOPIC: pending_transactions
      KAFKA_TRANSACTIONS_RESULT_TOPIC: transactions_result
      KAFKA_CONSUMER_GROUP_ID: anti-fraud-group
    depends_on:
      db-nestjs:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    networks:
      - payment-network
    restart: unless-stopped

volumes:
  postgres_go_data:
  postgres_nestjs_data:
